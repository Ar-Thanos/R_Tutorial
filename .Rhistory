getwd()
3+5
#Intro R first lesson as of June 16th
3+5
#Intro R first lesson as of June 16th
3+5
Lesson1.R
#Intro R first lesson as of June 16th
3+5
baseDir <- getwd()
dataDir <- file.path(baseDir, "data") #if i had a data folder in my directory this would give me path from my baseDir to my specific folder
ls
ls(baseDir)
ls(Lesson1)
ls("Lesson1.R")
ls
clear
clear()
x <-5
y <- 4
z <- x+y
x <-5
y <- 4
z <- x+y
x<-7
#numeric is a diff data type from integer. denote integer with L see below
5L
#character ~ String and ther e is a complex data type. so 1+4i basically
#raw exists too
pi
glengths <- c(4.6, 3000, 5000) #example vector of genome lengths, c is combine function
species <- c("ecoli", "people who space", "people who tab")
combinedData <- c(glengths, species)
head(combinedData)
expression <- c("low", "high", "medium", "high", "low", "medium", "high")
count(expression)
expression <- factor(expression) #create factor
samplegroup <- c("CTL", "CTL", "CTL", "KO", "KO", "KO", "OE", "OE", "OE")
samplegroup< - factor(samplegroup)
samplegroup< - factor(samplegroup)
samplegroup <- factor(samplegroup)
#assign label an integer alphabetically
expression
df <- data.frame(species, glengths)
df
#------------------------------------------------------------------#
#list. hold any number of any type of other data structures
#list()
list1 <- list(species, df, number)
#------------------------------------------------------------------#
#list. hold any number of any type of other data structures
#list()
list1 <- list(species, df, glenths)
#------------------------------------------------------------------#
#list. hold any number of any type of other data structures
#list()
list1 <- list(species, df, glengths)
list1
sqrt(glengths)
round(pi)
?round
args(round)
example("round")
round(pi, digits = 4)
round(pi, 3)
args(return)
summer(5, 1)
summer <- function(argument1, argument2){
return (argument1 + argument2) #retunrn is a function heads up
}
summer(5, 1)
sessionInfo()
install.packages("ggplot2")
. do installl
echo("Meow")
print("meow")
#to locally install packages do this.
#install.packages("~/Downloads/ggplot2_1.0.1.tar.gz", type = "source", repose = NULL)
library(ggplot2)
install.packages("tidyverse")
install.packages("tidyverse")
?read.csv
metadata <- read.csv(file = "mouse_exp_design.csv")
metadata
metadata <- read.csv(file = "mouse_exp_design.csv", stringsAsFactors = FALSE)
metadata
str(metadat)
str(metadata)
class(metadata)
summary(metadata)
dim(metadata)
nrow(metadata) #number of rows. guess the column equivalent
rownames(metadata)
str(rownames(metadata)) #names...
#vectors again
age <- c(15, 22, 45, 52, 73, 81)
age[5]
age[-5]
age[-5 -3]
age[-5,-3]
age[-3]
age[c(3,5,6)]
age[1:4]
age[4:1]
age[-4:-1]
age[-5:1]
age[-5:-1]
age[5:1]
age > 50
str(age > 50) #if each element in age is greater than 50. prints each one
class(strage > 50) #if each element in age is greater than 50. prints each one
class(age > 50) #if each element in age is greater than 50. prints each one
#returned a vector
age>50 | age<18
age
age[age>50 | age<18]
which(age > 50 | age < 18)
age[which(age > 50 | age < 18)]
#back to factor
expression[expression == "high"]
expression[expression != "KO"]
#maybe relevel expression no?
expression <- factor(expression, levels = c("low, medium, high"))
str(expression)
#maybe relevel expression no?
expression <- factor(expression, levels = c("low", "medium", "high"))
str(expression)
expression <- c("low", "high", "medium", "high", "low", "medium", "high")
#maybe relevel expression no?
expression <- factor(expression, levels = c("low", "medium", "high"))
str(expression)
#dataframe
metadata[1,1]
metadata[1]
metadata[1] #just shows first column. not as specific
metadata[1] #just shows first row not as specific
metadata[,1]
metadata[1,]
#can just use column names instead of index since hard to remember
metadata[1:3, "celltype"]
metadata$genotype[1:5]
metadata[,c("genotype","celltype")]
metadata[metadata$celltype == "typeA",]
sub_meta <- metadata[which(metadata$replicate > 1)]
sub_meta <- metadata[which(metadata$replicate > 1),]
sub_meta
list1[[2]]
class(list1[[2]])
list1[[1]]
list1[[1]][1]
random <- list(metadata, age, list1, samplegroup, number)
random <- list(metadata, age, list1, samplegroup, glengths)
random[["samplegroup"]]
random[[4]]
random[[1]]$celltype[-5]
View(random)
View(metadata)
random[[1]]$celltype[length(random[[1]]$celltype) - 5:length(random[[1]]$celltype)]
random[[1]]$celltype[(length(random[[1]]$celltype) - 5):length(random[[1]]$celltype)]
names(list1)
names(list1) <- c("species", "df", "number") #adding names to components in a list
list1
names(list1)
list1$df
list1[["species"]] #names now!
list1[[1]]
list1[["species"]] #names now!
list1$species
write.csv(sub_meta, file = "subset_meta.csv")
write(glengths, file = "data/genome_lengths.txt", ncolumns = 1)#vector
write(glengths, file = "genome_lengths.txt", ncolumns = 1)#vector
